
Aim: Create a production level implementation of Adaptive Radix trees in Java.


- Start with something basic/skeleton, with a simple bytes-only Radix tree
- Then add the adaptiveness on top
- Then add path compression and lazy expansion to it (the paper describes it well)
- Only take byte arrays (the any generic Key to byte array with ObjectInputStream/Serializable could be done later)

We'd have a MVP here

We could make it performant by pursuing further:
- Refactor code to use SIMD (by JIT), pack fields to be on same cache line, etc low level optimisations in general
- Make another Big Data version of the class? That is off-heap etc? Search for articles by Peter Lawrey
