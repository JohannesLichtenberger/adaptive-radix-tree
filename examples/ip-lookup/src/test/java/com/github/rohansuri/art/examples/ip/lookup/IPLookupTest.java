/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.rohansuri.art.examples.ip.lookup;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Optional;
import java.util.Set;
import java.util.TreeMap;


import com.github.rohansuri.art.AdaptiveRadixTree;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class IPLookupTest {
	@Test
	void testOrdering() throws IOException {
		IPLookup ipArt = new IPLookup(() -> new AdaptiveRadixTree<>(InetAddressBinaryComparable.INSTANCE));
		NavigableMap<InetAddress, Record> art = ipArt.map();
		IPLookup ipRbt = new IPLookup(() -> new TreeMap<>(InetAddressComparator.INSTANCE));

		assertEquals(ipArt.map().size(), ipRbt.map().size());
		assertEquals(70865, art.size());
		Iterator<Map.Entry<InetAddress, Record>> it = art.entrySet().iterator();
		for (Map.Entry<InetAddress, Record> e : ipRbt.map().entrySet()) {
			assertEquals(it.next(), e);
		}
	}

	@Test
	public void testSomeLookups() throws IOException {
		IPLookup ipArt = new IPLookup(() -> new AdaptiveRadixTree<>(InetAddressBinaryComparable.INSTANCE));
		IPLookup ipRbt = new IPLookup(() -> new TreeMap<>(InetAddressComparator.INSTANCE));

		// inside range
		InetAddress inetAddress = InetAddress.getByName("61.11.0.1");
		Optional<String> country = ipArt.lookup(inetAddress);
		assertTrue(country.isPresent());
		assertEquals(country.get(), "India");
		assertEquals(country, ipRbt.lookup(inetAddress));

		// on end
		inetAddress = InetAddress.getByName("61.11.127.255");
		country = ipArt.lookup(inetAddress);
		assertTrue(country.isPresent());
		assertEquals(country.get(), "India");
		assertEquals(country, ipRbt.lookup(inetAddress));

		// on start
		inetAddress = InetAddress.getByName("61.11.0.0");
		country = ipArt.lookup(inetAddress);
		assertTrue(country.isPresent());
		assertEquals(country.get(), "India");
		assertEquals(country, ipRbt.lookup(inetAddress));

		// does not exist
		inetAddress = InetAddress.getByName("0.0.0.0");
		country = ipArt.lookup(inetAddress);
		assertFalse(country.isPresent());
		assertEquals(country, ipRbt.lookup(inetAddress));
	}


	@Test
	@Disabled("too many permuations to go over")
	public void testLookup() throws IOException {
		IPLookup ipArt = new IPLookup(() -> new AdaptiveRadixTree<>(InetAddressBinaryComparable.INSTANCE));
		IPLookup ipRbt = new IPLookup(() -> new TreeMap<>(InetAddressComparator.INSTANCE));

		for (int i = 0; i < 256; i++) {
			String iaddress = i + ".";
			for (int j = 0; j < 256; j++) {
				String jaddress = iaddress + j + ".";
				for (int k = 0; k < 256; k++) {
					String kaddress = jaddress + k + ".";
					for (int l = 0; l < 256; l++) {
						InetAddress inetAddress = InetAddress.getByName(kaddress + l);
						assertEquals(ipArt.lookup(inetAddress), ipRbt.lookup(inetAddress));
					}
				}
			}
		}
	}

}
