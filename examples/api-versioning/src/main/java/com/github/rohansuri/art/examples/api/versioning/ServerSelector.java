/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.rohansuri.art.examples.api.versioning;

import java.util.Map;
import java.util.NavigableMap;
import java.util.Optional;
import java.util.function.Supplier;

/*
 *  Server selector logic for that selects the target server address for a given REST service
 *  depending on a "best version match".
 *
 * 	Best match definition:
 *  1) no version specified: get server corresponding to highest major, minor version
 *  2) major, minor both specified: get server corresponding to exact match
 *  3) only major specified: get server corresponding to given major and highest minor
 */
public class ServerSelector {
	private final NavigableMap<APIVersion, String> m;

	public ServerSelector(Supplier<NavigableMap<APIVersion, String>> s) {
		m = s.get();
	}

	void addServer(APIVersion version, String address) {
		m.put(version, address);
	}

	Optional<String> select(String version) {
		if (version.isEmpty()) {
			// of nullable since map could be empty
			return Optional.ofNullable(m.lastEntry().getValue());
		}
		// strip "v" at head of string
		version = version.substring(1);
		int separatorIndex = version.indexOf(".");
		if (separatorIndex != -1) {
			// major, minor both given
			// example "v2.1"
			// do exact match
			String[] mm = version.split("[.]");
			int major = Integer.parseInt(mm[0]);
			int minor = Integer.parseInt(mm[1]);
			return Optional.ofNullable(m.get(new APIVersion(major, minor)));
		}

		// only major given, find highest minor
		int major = Integer.parseInt(version);
		Map.Entry<APIVersion, String> entry = m.floorEntry(new APIVersion(major, Integer.MAX_VALUE));
		if (entry == null || entry.getKey().major != major) {
			return Optional.empty();
		}
		return Optional.of(entry.getValue());
	}

	NavigableMap<APIVersion, String> map() {
		return m;
	}
}
