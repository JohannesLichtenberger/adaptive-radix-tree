<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:black; }
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text x="600" y="24" text-anchor="middle" style="font-size:17px">Flame Graph</text>
<text x="10" y="869" id="details"> </text>
<text x="10" y="24" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer">Reset Zoom</text>
<text x="1090" y="24" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer">Search</text>
<text x="1090" y="869" id="matched"> </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (59459 samples, 100.00%)</title><rect x="10.0" y="835.0" width="1180.0" height="15" fill="#d24141" rx="2" ry="2"/>
<text x="13.0" y="846.0">all</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[unknown] (69 samples, 0.12%)</title><rect x="11.8" y="819.0" width="1.3" height="15" fill="#ec6767" rx="2" ry="2"/>
<text x="14.8" y="830.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Thread.run (58245 samples, 97.96%)</title><rect x="13.9" y="819.0" width="1155.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="830.0">java/lang/Thread.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (58245 samples, 97.96%)</title><rect x="13.9" y="803.0" width="1155.9" height="15" fill="#46db46" rx="2" ry="2"/>
<text x="16.9" y="814.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (58245 samples, 97.96%)</title><rect x="13.9" y="787.0" width="1155.9" height="15" fill="#35cb35" rx="2" ry="2"/>
<text x="16.9" y="798.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/FutureTask.run (58245 samples, 97.96%)</title><rect x="13.9" y="771.0" width="1155.9" height="15" fill="#33c933" rx="2" ry="2"/>
<text x="16.9" y="782.0">java/util/concurrent/FutureTask.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/Executors$RunnableAdapter.call (58245 samples, 97.96%)</title><rect x="13.9" y="755.0" width="1155.9" height="15" fill="#4de14d" rx="2" ry="2"/>
<text x="16.9" y="766.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/FutureTask.run (58245 samples, 97.96%)</title><rect x="13.9" y="739.0" width="1155.9" height="15" fill="#35cb35" rx="2" ry="2"/>
<text x="16.9" y="750.0">java/util/concurrent/FutureTask.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (58245 samples, 97.96%)</title><rect x="13.9" y="723.0" width="1155.9" height="15" fill="#40d540" rx="2" ry="2"/>
<text x="16.9" y="734.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (58245 samples, 97.96%)</title><rect x="13.9" y="707.0" width="1155.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="718.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/reflect/Method.invoke (58245 samples, 97.96%)</title><rect x="13.9" y="691.0" width="1155.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.9" y="702.0">java/lang/reflect/Method.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun/reflect/DelegatingMethodAccessorImpl.invoke (58245 samples, 97.96%)</title><rect x="13.9" y="675.0" width="1155.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.9" y="686.0">sun/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun/reflect/NativeMethodAccessorImpl.invoke (58245 samples, 97.96%)</title><rect x="13.9" y="659.0" width="1155.9" height="15" fill="#41d641" rx="2" ry="2"/>
<text x="16.9" y="670.0">sun/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sun/reflect/NativeMethodAccessorImpl.invoke0 (58245 samples, 97.96%)</title><rect x="13.9" y="643.0" width="1155.9" height="15" fill="#52e552" rx="2" ry="2"/>
<text x="16.9" y="654.0">sun/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/generated/Lookup_lookup_jmhTest.lookup_Throughput (58245 samples, 97.96%)</title><rect x="13.9" y="627.0" width="1155.9" height="15" fill="#48dc48" rx="2" ry="2"/>
<text x="16.9" y="638.0">art/generated/Lookup_lookup_jmhTest.lookup_Throughput</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/AdaptiveRadixTree.getEntry (55 samples, 0.09%)</title><rect x="13.9" y="611.0" width="1.1" height="15" fill="#5ff15f" rx="2" ry="2"/>
<text x="16.9" y="622.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/AdaptiveRadixTree.getEntry (55 samples, 0.09%)</title><rect x="13.9" y="595.0" width="1.1" height="15" fill="#50e450" rx="2" ry="2"/>
<text x="16.9" y="606.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/Node4.findChild (55 samples, 0.09%)</title><rect x="13.9" y="579.0" width="1.1" height="15" fill="#5aec5a" rx="2" ry="2"/>
<text x="16.9" y="590.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.binarySearch (55 samples, 0.09%)</title><rect x="13.9" y="563.0" width="1.1" height="15" fill="#51e551" rx="2" ry="2"/>
<text x="16.9" y="574.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.binarySearch0 (55 samples, 0.09%)</title><rect x="13.9" y="547.0" width="1.1" height="15" fill="#34ca34" rx="2" ry="2"/>
<text x="16.9" y="558.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/generated/Lookup_lookup_jmhTest.lookup_thrpt_jmhStub (58190 samples, 97.87%)</title><rect x="15.0" y="611.0" width="1154.8" height="15" fill="#4ce04c" rx="2" ry="2"/>
<text x="18.0" y="622.0">art/generated/Lookup_lookup_jmhTest.lookup_thrpt_jmhStub</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/AdaptiveRadixTree.getEntry (795 samples, 1.34%)</title><rect x="40.4" y="595.0" width="15.8" height="15" fill="#69fb69" rx="2" ry="2"/>
<text x="43.4" y="606.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/Lookup.lookup (54561 samples, 91.76%)</title><rect x="56.2" y="595.0" width="1082.8" height="15" fill="#69fb69" rx="2" ry="2"/>
<text x="59.2" y="606.0">art/Lookup.lookup</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/AdaptiveRadixTree.get (41521 samples, 69.83%)</title><rect x="56.2" y="579.0" width="824.0" height="15" fill="#5def5d" rx="2" ry="2"/>
<text x="59.2" y="590.0">art/AdaptiveRadixTree.get</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/AdaptiveRadixTree.getEntry (39805 samples, 66.95%)</title><rect x="90.2" y="563.0" width="790.0" height="15" fill="#43d743" rx="2" ry="2"/>
<text x="93.2" y="574.0">art/AdaptiveRadixTree.getEntry</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/AdaptiveRadixTree.getEntry (28860 samples, 48.54%)</title><rect x="90.2" y="547.0" width="572.7" height="15" fill="#5ef05e" rx="2" ry="2"/>
<text x="93.2" y="558.0">art/AdaptiveRadixTree.getEntry</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/Node4.findChild (18463 samples, 31.05%)</title><rect x="296.0" y="531.0" width="366.4" height="15" fill="#58eb58" rx="2" ry="2"/>
<text x="299.0" y="542.0">art/Node4.findChild</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.binarySearch (18463 samples, 31.05%)</title><rect x="296.0" y="515.0" width="366.4" height="15" fill="#47db47" rx="2" ry="2"/>
<text x="299.0" y="526.0">java/util/Arrays.binarySearch</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/Arrays.binarySearch0 (18463 samples, 31.05%)</title><rect x="296.0" y="499.0" width="366.4" height="15" fill="#5bed5b" rx="2" ry="2"/>
<text x="299.0" y="510.0">java/util/Arrays.binarySearch0</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/BinaryComparable$$Lambda$3/1076663275.get (10945 samples, 18.41%)</title><rect x="662.9" y="547.0" width="217.3" height="15" fill="#3bd13b" rx="2" ry="2"/>
<text x="665.9" y="558.0">art/BinaryComparable$$Lambda$..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>art/BinaryComparable.lambda$static$0 (10945 samples, 18.41%)</title><rect x="662.9" y="531.0" width="217.3" height="15" fill="#4ce04c" rx="2" ry="2"/>
<text x="665.9" y="542.0">art/BinaryComparable.lambda$s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/nio/ByteBuffer.allocate (10945 samples, 18.41%)</title><rect x="662.9" y="515.0" width="217.3" height="15" fill="#66f866" rx="2" ry="2"/>
<text x="665.9" y="526.0">java/nio/ByteBuffer.allocate</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10945 samples, 18.41%)</title><rect x="662.9" y="499.0" width="217.3" height="15" fill="#63f563" rx="2" ry="2"/>
<text x="665.9" y="510.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Integer.valueOf (11835 samples, 19.90%)</title><rect x="880.2" y="579.0" width="234.9" height="15" fill="#45da45" rx="2" ry="2"/>
<text x="883.2" y="590.0">java/lang/Integer.valueOf</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadLocalRandom.nextInt (1205 samples, 2.03%)</title><rect x="1115.1" y="579.0" width="23.9" height="15" fill="#3fd43f" rx="2" ry="2"/>
<text x="1118.1" y="590.0">j..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadLocalRandom.internalNextInt (1205 samples, 2.03%)</title><rect x="1115.1" y="563.0" width="23.9" height="15" fill="#67f967" rx="2" ry="2"/>
<text x="1118.1" y="574.0">j..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>org/openjdk/jmh/infra/Blackhole.consume (1554 samples, 2.61%)</title><rect x="1139.0" y="595.0" width="30.8" height="15" fill="#47db47" rx="2" ry="2"/>
<text x="1142.0" y="606.0">or..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>pthread_cond_signal@@GLIBC_2.3.2 (77 samples, 0.13%)</title><rect x="1170.0" y="819.0" width="1.5" height="15" fill="#ed6868" rx="2" ry="2"/>
<text x="1173.0" y="830.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>entry_SYSCALL_64_after_hwframe (70 samples, 0.12%)</title><rect x="1170.1" y="803.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1173.1" y="814.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>do_syscall_64 (69 samples, 0.12%)</title><rect x="1170.1" y="787.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1173.1" y="798.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>sys_futex (65 samples, 0.11%)</title><rect x="1170.2" y="771.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1173.2" y="782.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>do_futex (64 samples, 0.11%)</title><rect x="1170.2" y="755.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1173.2" y="766.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>futex_wake (64 samples, 0.11%)</title><rect x="1170.2" y="739.0" width="1.3" height="15" fill="#da7600" rx="2" ry="2"/>
<text x="1173.2" y="750.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>wake_up_q (55 samples, 0.09%)</title><rect x="1170.4" y="723.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1173.4" y="734.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>try_to_wake_up (55 samples, 0.09%)</title><rect x="1170.4" y="707.0" width="1.1" height="15" fill="#d77300" rx="2" ry="2"/>
<text x="1173.4" y="718.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_raw_spin_unlock_irqrestore (55 samples, 0.09%)</title><rect x="1170.4" y="691.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1173.4" y="702.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>start_thread (932 samples, 1.57%)</title><rect x="1171.5" y="819.0" width="18.5" height="15" fill="#ed6868" rx="2" ry="2"/>
<text x="1174.5" y="830.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java_start(Thread*) (932 samples, 1.57%)</title><rect x="1171.5" y="803.0" width="18.5" height="15" fill="#fa7a7a" rx="2" ry="2"/>
<text x="1174.5" y="814.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>GCTaskThread::run() (594 samples, 1.00%)</title><rect x="1171.5" y="787.0" width="11.8" height="15" fill="#c9c93b" rx="2" ry="2"/>
<text x="1174.5" y="798.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (121 samples, 0.20%)</title><rect x="1172.9" y="771.0" width="2.4" height="15" fill="#baba36" rx="2" ry="2"/>
<text x="1175.9" y="782.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>PSScavengeKlassClosure::do_klass(Klass*) (83 samples, 0.14%)</title><rect x="1173.5" y="755.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>StealTask::do_it(GCTaskManager*, unsigned int) (315 samples, 0.53%)</title><rect x="1175.3" y="771.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (108 samples, 0.18%)</title><rect x="1175.3" y="755.0" width="2.2" height="15" fill="#b7b734" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SpinPause (201 samples, 0.34%)</title><rect x="1177.5" y="755.0" width="4.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (75 samples, 0.13%)</title><rect x="1181.6" y="771.0" width="1.5" height="15" fill="#d2d23e" rx="2" ry="2"/>
<text x="1184.6" y="782.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (69 samples, 0.12%)</title><rect x="1181.6" y="755.0" width="1.4" height="15" fill="#c6c63a" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VMThread::run() (325 samples, 0.55%)</title><rect x="1183.3" y="787.0" width="6.4" height="15" fill="#d1d13e" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VMThread::loop() (325 samples, 0.55%)</title><rect x="1183.3" y="771.0" width="6.4" height="15" fill="#bebe37" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VMThread::evaluate_operation(VM_Operation*) (267 samples, 0.45%)</title><rect x="1184.3" y="755.0" width="5.3" height="15" fill="#dada41" rx="2" ry="2"/>
<text x="1187.3" y="766.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VM_Operation::evaluate() (266 samples, 0.45%)</title><rect x="1184.3" y="739.0" width="5.3" height="15" fill="#bfbf38" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VM_ParallelGCFailedAllocation::doit() (266 samples, 0.45%)</title><rect x="1184.3" y="723.0" width="5.3" height="15" fill="#c7c73a" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (262 samples, 0.44%)</title><rect x="1184.3" y="707.0" width="5.2" height="15" fill="#bbbb36" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>PSScavenge::invoke() (260 samples, 0.44%)</title><rect x="1184.4" y="691.0" width="5.1" height="15" fill="#b9b935" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>PSScavenge::invoke_no_policy() (241 samples, 0.41%)</title><rect x="1184.5" y="675.0" width="4.8" height="15" fill="#bebe37" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (166 samples, 0.28%)</title><rect x="1185.9" y="659.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
</svg>
